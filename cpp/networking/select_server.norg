@document.meta
title: select_server
description:
authors: smitropoulos
categories: [
  cpp
  networking
]
created: 2024-04-17T19:14:49+0200
updated: 2024-04-17T19:14:49+0200
version: 1.1.1
@end

* Extends {:simple_server:}
  Instead of accepting each new connection, you can wait for multiple clients with select.
  After having a "master" socket, `serverFd`, do this:

  From {https://linux.die.net/man/3/fd_isset}
  > Four macros are provided to manipulate the sets. FD_ZERO() clears a set. FD_SET() and FD_CLR() respectively add and remove a given file descriptor from a set. FD_ISSET() tests to see if a file descriptor is part of the set; this is useful after select() returns.

  On this example, echo back the buffer to the client

  @code cpp
  int addrlen, new_socket, client_socket[30], max_clients = 30, activity, i,
  valread, sd;
  int max_sd;
  struct sockaddr_in address;

  // set of socket descriptors
  fd_set readfds;

  // initialise all client_socket[] to 0 so not checked
  for (i = 0; i < max_clients; i++) {
    client_socket[i] = 0;
  }


  while (true) {
    // clear the socket set
    FD_ZERO(&readfds);

    // add master socket to set
    FD_SET(serverFd, &readfds);
    max_sd = serverFd;

    // add child sockets to set
    for (i = 0; i < max_clients; i++) {
      // socket descriptor
      sd = client_socket[i];

      // if valid socket descriptor then add to read list
      if (sd > 0)
        FD_SET(sd, &readfds);

      // highest file descriptor number, need it for the select function
      if (sd > max_sd)
        max_sd = sd;
    }

    // wait for an activity on one of the sockets , timeout is nullptr ,
    // so wait indefinitely
    activity = select(max_sd + 1, &readfds, nullptr, nullptr, nullptr);

    if ((activity < 0) && (errno != EINTR)) {
      perror("select error");
    }

    // If something happened on the master socket ,
    // then its an incoming connection
    if (FD_ISSET(serverFd, &readfds)) {
      if ((new_socket = accept(serverFd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
      }

      // inform user of socket number - used in send and receive commands
      printf("New connection , socket fd is %d , ip is : %s , port : %d \n ",
             new_socket, inet_ntoa(address.sin_addr), ntohs(address.sin_port));

      // add new socket to array of sockets
      for (i = 0; i < max_clients; i++) {
        // if position is empty
        if (client_socket[i] == 0) {
          client_socket[i] = new_socket;
          printf("Adding to list of sockets as %d\n", i);

          break;
        }
      }
    }

    // else its some IO operation on some other socket
    for (i = 0; i < max_clients; i++) {
      sd = client_socket[i];

      if (FD_ISSET(sd, &readfds)) {
        // Check if it was for closing , and also read the
        // incoming message
        if ((valread = read(sd, buffer, 1024)) == 0) {
          // Somebody disconnected , get his details and print
          getpeername(sd, (struct sockaddr *)&address, (socklen_t *)&addrlen);
          printf("Host disconnected , ip %s , port %d \n",
                 inet_ntoa(address.sin_addr), ntohs(address.sin_port));

          // Close the socket and mark as 0 in list for reuse
          close(sd);
          client_socket[i] = 0;
        }

        // Echo back the message that came in
        else {
          // set the string terminating nullptr byte on the end
          // of the data read
          buffer[valread] = '\0';
          send(sd, buffer, strlen(buffer), 0);
        }
      }
    }
  }
}
  @end
