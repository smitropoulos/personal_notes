@document.meta
title: general
description: Rust by example notes
authors: smitropoulos
categories: [
  rust
  language
]
created: 2024-08-06T20:21:21+0200
updated: 2024-08-06T20:21:21+0200
version: 1.1.1
@end

* Comments
  3 types
  - Line `//`.
  - Block `/**/`.
  - Docs `///` and enclosing item docs with `//!`.

* Printing
  - `format!`: write formatted text to String
  - `print!`: same as format! but the text is printed to the console (io::stdout).
  - `println!`: same as print! but a newline is appended.
  - `eprint!`: same as print! but the text is printed to the standard error (io::stderr).
  - `eprintln!`: same as eprint! but a newline is appended.

  *Formatting documentation {https://doc.rust-lang.org/std/fmt/#formatting-traits}[here]*

** Python formatting style
   `println!("{} days", 31);`

** Numbered formatting style
   `println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");`

** Named formatting style
   `println!("{subject} {verb} {object}", object="the lazy dog", subject="the quick brown fox", verb="jumps over");`

** Pretty printing
   fmt::Debug: Uses the {:?} marker. Format text for debugging purposes.
   fmt::Display: Uses the {} marker. Format text in a more elegant, user friendly fashion.
   Rust also provides "pretty printing" with {:#?}.

   ** Printability
   All types which want to use std::fmt formatting traits require an implementation to be printable. Automatic implementations are only provided for types such as in the std library. All others must be manually implemented somehow.

*** Debug printing
    All types can derive the `Debug` trait with `#[derive(Debug)]` which will make them printable with `fmt::Debug`

    @code rust
    // This structure cannot be printed either with `fmt::Display` or
    // with `fmt::Debug`.
    struct UnPrintable(i32);

    // The `derive` attribute automatically creates the implementation
    // required to make this `struct` printable with `fmt::Debug`.
    #[derive(Debug)]
    struct DebugPrintable(i32);
    @end

** Display
   Implementing the `fmt::Display` trait
   @code rust
   // Import (via `use`) the `fmt` module to make it available.
   use std::fmt;

   // Define a structure for which `fmt::Display` will be implemented. This is
   // a tuple struct named `Structure` that contains an `i32`.
   struct Structure(i32);

   // To use the `{}` marker, the trait `fmt::Display` must be implemented
   // manually for the type.
   impl fmt::Display for Structure {
     // This trait requires `fmt` with this exact signature.
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
       // Write strictly the first element into the supplied output
       // stream: `f`. Returns `fmt::Result` which indicates whether the
       // operation succeeded or failed. Note that `write!` uses syntax which
       // is very similar to `println!`.
       write!(f, "{}", self.0)
     }
   }
   @end
